Introduction to Lisp

sbcl

Prefix Notation
computation consist of parenthesized list with the operation name first.
followed by any number of operands, or arguments

Parentheses clearly mark the begining and end of an expression

* (+ 2 2) ; this is a comment 4

* (+ 1 2 3 4 5 6 7 8 9 10); 55

Expressions can be nested

(- (+ 9000 900 90 9) (+ 5000 500 50 5)); 4444

#1.1 Symbolic computation

Mark (') serves to block the evaliation of following expression

The quote mark instructs Lisp to treat the list as a piece of data 
rather than as function call

* 'John; JOHN
* '(John Q Public) ; (JOHN Q PUBLIC)
* '2; 2
* 2; 2
* '(+ 2 2); (+ 2 2)
* (+ 2 2); 4
* (append '(Pat Kim) '(Robin Sandy));  (PAT KIM ROBIN SANDY)

evaluating a symbol means getting the value of the symbol

* (append '(Pat Kim) (list '(John Q Public) 'Sandy)) ; (PAT KIM (JOHN Q PUBLIC) SANDY)

* (length (append '(Pat Kim) (list '(John Q Public) 'Sandy))); 4

“Common Lisp provides over 700 built-in functions”

1.2 Variables

* (setf x 10); 10
* (+ x x) ; 20
* (+ x 3); 13

1.3 Special forms

“ The philosophy of Lisp is to provide a small number of special forms 
to do the things that could not otherwise be done, and then to expect 
the user to write everything else as functions”

defun -> define function
defparameter -> define special variable
setf -> set variable or field to new value
let -> bind local variable(s)
case -> choose one of several alternatives
if-> do one thing or another, depending on a test
function (#') -> refer to a function
quote (') -> introduce constant data
